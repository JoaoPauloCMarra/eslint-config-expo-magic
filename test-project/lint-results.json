$ eslint . --ext .js,.jsx,.ts,.tsx --format json
[{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/.eslintrc.js","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'eslint-config-expo-magic'` with `\"eslint-config-expo-magic\"`","line":3,"column":13,"nodeType":null,"messageId":"replace","endLine":3,"endColumn":39,"fix":{"range":[45,71],"text":"\"eslint-config-expo-magic\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":9,"column":3,"nodeType":null,"messageId":"insert","endLine":9,"endColumn":3,"fix":{"range":[254,254],"text":"\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"module.exports = {\n  root: true,\n  extends: ['eslint-config-expo-magic'],\n  // Add any custom overrides for testing here\n  rules: {\n    // Allow console in test files for demonstration - REMOVED to test no-console rule\n    // 'no-console': 'off',\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx","messages":[{"ruleId":"import-x/order","severity":2,"message":"There should be no empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"noLineBetweenGroups","endLine":1,"endColumn":60},{"ruleId":"import-x/default","severity":2,"message":"No default export found in imported module \"react\".","line":1,"column":8,"nodeType":"ImportDefaultSpecifier","messageId":"noDefaultExport","endLine":1,"endColumn":13},{"ruleId":"import-x/order","severity":2,"message":"There should be no empty line between import groups","line":18,"column":1,"nodeType":"ImportDeclaration","messageId":"noLineBetweenGroups","endLine":18,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[717,720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[717,720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":1,"message":"A `require()` style import is forbidden.","line":21,"column":24,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":21,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unusedVariable' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'badFunction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1019,1022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1019,1022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":14,"suggestions":[{"fix":{"range":[1031,1050],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react/no-unstable-nested-components","severity":2,"message":"Do not define components during render. React will see a new component type on every render and destroy the entire subtree’s DOM nodes and state (https://reactjs.org/docs/reconciliation.html#elements-of-different-types). Instead, move this component definition out of the parent component “App” and pass data as props.","line":35,"column":27,"nodeType":"ArrowFunctionExpression","endLine":35,"endColumn":48},{"ruleId":"react-hooks/static-components","severity":2,"message":"Error: Cannot create components during render\n\nComponents created during render will reset their state each time they are created. Declare components outside of render.\n\n/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx:39:8\n  37 |   return (\n  38 |     <View>\n> 39 |       <NestedComponent />\n     |        ^^^^^^^^^^^^^^^ This component is created during render\n  40 |     </View>\n  41 |   );\n  42 | }\n\n/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx:35:27\n  33 | // ❌ This should trigger react/no-unstable-nested-components\n  34 | function App() {\n> 35 |   const NestedComponent = () => <Text>Hi</Text>; // Created on every render\n     |                           ^^^^^^^^^^^^^^^^^^^^^ The component is created during render here\n  36 |\n  37 |   return (\n  38 |     <View>","line":39,"column":8,"nodeType":null,"endLine":39,"endColumn":23},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":52,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":52,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1479,1479],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1479,1479],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BadInterface' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":16,"suggestions":[{"fix":{"range":[1865,1884],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [count]","fix":{"range":[1915,1917],"text":"[count]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'confusingVoidFunction' is defined but never used. Allowed unused vars must match /^_/u.","line":72,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":14,"suggestions":[{"fix":{"range":[2093,2157],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BadStyledComponent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":77,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":25},{"ruleId":"react-native/no-inline-styles","severity":2,"message":"Inline style: { margin: 10, padding: 20 }","line":78,"column":16,"nodeType":"ObjectExpression","endLine":78,"endColumn":43},{"ruleId":"react-native/no-raw-text","severity":2,"message":"Whitespace(s) cannot be used outside of a <Text> tag","line":79,"column":6,"nodeType":"Literal","endLine":79,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":12,"suggestions":[{"fix":{"range":[2413,2450],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentWithImpureRender' is defined but never used. Allowed unused vars must match /^_/u.","line":89,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":35},{"ruleId":"react-hooks/purity","severity":2,"message":"Error: Cannot call impure function during render\n\n`Math.random` is an impure function. Calling an impure function can produce unstable results that update unpredictably when the component happens to re-render. (https://react.dev/reference/rules/components-and-hooks-must-be-pure#components-and-hooks-must-be-idempotent).\n\n/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx:90:23\n  88 | // ❌ This should trigger react-hooks/purity (impure function in render)\n  89 | function ComponentWithImpureRender() {\n> 90 |   const randomValue = Math.random(); // ❌ Impure!\n     |                       ^^^^^^^^^^^^^ Cannot call impure function\n  91 |   return <Text>Random: {randomValue}</Text>;\n  92 | }\n  93 |","line":90,"column":23,"nodeType":null,"endLine":90,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentReadingRef' is defined but never used. Allowed unused vars must match /^_/u.","line":95,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":29},{"ruleId":"react-hooks/refs","severity":2,"message":"Error: Cannot access refs during render\n\nReact refs are values that are not needed for rendering. Refs should only be accessed outside of render, such as in event handlers or effects. Accessing a ref value (the `current` property) during render can cause your component not to update as expected (https://react.dev/reference/react/useRef).\n\n/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx:97:18\n   95 | function ComponentReadingRef() {\n   96 |   const ref = useRef(null);\n>  97 |   const width = (ref.current as any)?.offsetWidth; // ❌ Reading ref during render\n      |                  ^^^^^^^^^^^ Cannot access ref value during render\n   98 |   return <View ref={ref}>Width: {width}</View>;\n   99 | }\n  100 |","line":97,"column":18,"nodeType":null,"endLine":97,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2824,2827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2824,2827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-native/no-raw-text","severity":2,"message":"Raw text (Width:) cannot be used outside of a <Text> tag","line":98,"column":26,"nodeType":"JSXText","endLine":98,"endColumn":33},{"ruleId":"react-hooks/refs","severity":2,"message":"Error: Cannot access refs during render\n\nReact refs are values that are not needed for rendering. Refs should only be accessed outside of render, such as in event handlers or effects. Accessing a ref value (the `current` property) during render can cause your component not to update as expected (https://react.dev/reference/react/useRef).\n\n/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx:98:34\n   96 |   const ref = useRef(null);\n   97 |   const width = (ref.current as any)?.offsetWidth; // ❌ Reading ref during render\n>  98 |   return <View ref={ref}>Width: {width}</View>;\n      |                                  ^^^^^ Cannot access ref value during render\n   99 | }\n  100 |\n  101 | // ❌ This should trigger react-hooks/immutability (mutating state)","line":98,"column":34,"nodeType":null,"endLine":98,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentMutatingState' is defined but never used. Allowed unused vars must match /^_/u.","line":102,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setItems' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":103,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentSettingStateInRender' is defined but never used. Allowed unused vars must match /^_/u.","line":109,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":39},{"ruleId":"react-hooks/set-state-in-render","severity":2,"message":"Error: Calling setState during render may trigger an infinite loop\n\nCalling setState during render will trigger another render, and can lead to infinite loops. (https://react.dev/reference/react/useState).\n\n/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx:111:3\n  109 | function ComponentSettingStateInRender({ value }: { value: number }) {\n  110 |   const [count, setCount] = useState(0);\n> 111 |   setCount(value); // ❌ Setting state during render\n      |   ^^^^^^^^ Found setState() in render\n  112 |   return <Text>Count: {count}</Text>;\n  113 | }\n  114 |","line":111,"column":3,"nodeType":null,"endLine":111,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentMutatingGlobals' is defined but never used. Allowed unused vars must match /^_/u.","line":117,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'awaitThenable' is defined but never used. Allowed unused vars must match /^_/u.","line":125,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":29},{"ruleId":"@typescript-eslint/await-thenable","severity":2,"message":"Unexpected `await` of a non-Promise (non-\"Thenable\") value.","line":127,"column":3,"nodeType":"AwaitExpression","messageId":"await","endLine":127,"endColumn":20,"suggestions":[{"messageId":"removeAwait","fix":{"range":[3870,3875],"text":""},"desc":"Remove unnecessary `await`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'misusedPromise' is defined but never used. Allowed unused vars must match /^_/u.","line":131,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":24},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Expected non-Promise value in a boolean conditional.","line":132,"column":7,"nodeType":"CallExpression","messageId":"conditional","endLine":132,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":16,"suggestions":[{"fix":{"range":[4078,4114],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unnecessaryAssertion' is defined but never used. Allowed unused vars must match /^_/u.","line":139,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'preferNullish' is defined but never used. Allowed unused vars must match /^_/u.","line":146,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":148,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":148,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4494,4496],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'preferOptionalChain' is defined but never used. Allowed unused vars must match /^_/u.","line":153,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'meaninglessVoid' is defined but never used. Allowed unused vars must match /^_/u.","line":160,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'arrayType' is defined but never used. Allowed unused vars must match /^_/u.","line":166,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EmptyInterface' is defined but never used. Allowed unused vars must match /^_/u.","line":172,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":172,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":172,"column":23,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":172,"endColumn":25,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[5187,5189],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[5187,5189],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unnecessaryConstraint' is defined but never used. Allowed unused vars must match /^_/u.","line":175,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":31},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":1,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":175,"column":42,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":175,"endColumn":44,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[5329,5331],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[5329,5331],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'wrapperObject' is defined but never used. Allowed unused vars must match /^_/u.","line":181,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'consistentAssertions' is defined but never used. Allowed unused vars must match /^_/u.","line":190,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5806,5809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5806,5809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extraNonNull' is defined but never used. Allowed unused vars must match /^_/u.","line":196,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":196,"endColumn":22},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":198,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":198,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6027,6030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6027,6030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'nonNullAssertion' is defined but never used. Allowed unused vars must match /^_/u.","line":203,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'redeclareFunction' is defined but never used. Allowed unused vars must match /^_/u.","line":210,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":27},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":211,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":211,"endColumn":30},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":212,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":212,"endColumn":31},{"ruleId":"@typescript-eslint/no-redeclare","severity":1,"message":"'redeclareVar' is already defined.","line":212,"column":7,"nodeType":"Identifier","messageId":"redeclared","endLine":212,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'redeclareVar' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":212,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UselessConstructor' is defined but never used. Allowed unused vars must match /^_/u.","line":216,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":25},{"ruleId":"@typescript-eslint/no-useless-constructor","severity":1,"message":"Useless constructor.","line":217,"column":3,"nodeType":"MethodDefinition","messageId":"noUselessConstructor","endLine":217,"endColumn":19,"suggestions":[{"messageId":"removeConstructor","fix":{"range":[6551,6567],"text":""},"desc":"Remove the constructor."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'badVariableName' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":221,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BadEnum' is defined but never used. Allowed unused vars must match /^_/u.","line":222,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":1,"message":"Enum Member name `badMember` must match one of the following formats: UPPER_CASE","line":223,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":223,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SelfClosingTest' is defined but never used. Allowed unused vars must match /^_/u.","line":227,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UselessFragmentTest' is defined but never used. Allowed unused vars must match /^_/u.","line":236,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":236,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LeakedRenderTest' is defined but never used. Allowed unused vars must match /^_/u.","line":241,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":26},{"ruleId":"react-hooks/purity","severity":2,"message":"Error: Cannot call impure function during render\n\n`Math.random` is an impure function. Calling an impure function can produce unstable results that update unpredictably when the component happens to re-render. (https://react.dev/reference/rules/components-and-hooks-must-be-pure#components-and-hooks-must-be-idempotent).\n\n/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/App.tsx:242:21\n  240 | // ❌ This should trigger react/jsx-no-leaked-render\n  241 | function LeakedRenderTest() {\n> 242 |   const condition = Math.random() > 0.5;\n      |                     ^^^^^^^^^^^^^ Cannot call impure function\n  243 |   return <Text>{condition && \"Hi\"}</Text>; // ❌ Leaked render\n  244 | }\n  245 |","line":242,"column":21,"nodeType":null,"endLine":242,"endColumn":34},{"ruleId":"react/jsx-no-leaked-render","severity":2,"message":"Potential leaked value that might cause unintentionally rendered values or rendering crashes","line":243,"column":17,"nodeType":"LogicalExpression","messageId":"noPotentialLeakedRender","endLine":243,"endColumn":34,"fix":{"range":[7269,7286],"text":"condition ? \"Hi\" : null"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unusedStyles' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":247,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":19},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: unusedStyles.unused","line":248,"column":3,"nodeType":"Property","endLine":248,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PlatformSpecificTest' is defined but never used. Allowed unused vars must match /^_/u.","line":252,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'singleStyleArray' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":257,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":23},{"ruleId":"react-native/no-unused-styles","severity":2,"message":"Unused style detected: singleStyleArray.single","line":258,"column":3,"nodeType":"Property","endLine":258,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7797,7800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7797,7800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentWithDefaultProps' is defined but never used. Allowed unused vars must match /^_/u.","line":262,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":262,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8060,8063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8060,8063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8126,8129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8126,8129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LegacyContext' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":274,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":274,"endColumn":20},{"ruleId":"import-x/no-named-as-default-member","severity":2,"message":"Caution: `React` also has a named export `createContext`. Check if you meant to write `import {createContext} from 'react'` instead.","line":274,"column":23,"nodeType":"MemberExpression","messageId":"member","endLine":274,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ComponentWithStringRef' is defined but never used. Allowed unused vars must match /^_/u.","line":277,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":277,"endColumn":32},{"ruleId":"react/no-string-refs","severity":2,"message":"Using string literals in ref attributes is deprecated.","line":278,"column":16,"nodeType":"JSXAttribute","messageId":"stringInRefDeprecated","endLine":278,"endColumn":31},{"ruleId":"react-19-upgrade/no-string-refs","severity":2,"message":"String refs are deprecated and will be removed in React 19. Use callback refs instead.","line":278,"column":16,"nodeType":"JSXAttribute","messageId":"noStringRefs","endLine":278,"endColumn":31}],"suppressedMessages":[],"errorCount":71,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from \"react\";\n\n// ❌ This should trigger @typescript-eslint/consistent-type-imports\n// ❌ Should use type import\n\n// ❌ This should trigger @typescript-eslint/no-import-type-side-effects\n\n// ❌ This should trigger @typescript-eslint/consistent-type-imports\n// ❌ Should use type import\n\n// ❌ This should trigger @typescript-eslint/no-import-type-side-effects\n\n// ❌ This should trigger @typescript-eslint/consistent-type-imports\n// ❌ Should use type import\n\n// ❌ This should trigger @typescript-eslint/no-import-type-side-effects\n// ❌ defaultProps\nimport { View, Text, StyleSheet } from \"react-native\";\n\n// ❌ This should trigger react-19-upgrade/no-prop-types\nconst PropTypes: any = require(\"prop-types\"); // ❌ PropTypes import\n\n// ❌ This should trigger no-restricted-imports (SafeAreaView from react-native)\n\n// ❌ This should trigger no-unused-vars\nconst unusedVariable = \"I am not used\";\n\n// ❌ This should trigger @typescript-eslint/no-explicit-any\nconst badFunction = (param: any) => {\n  console.log(param);\n};\n\n// ❌ This should trigger react/no-unstable-nested-components\nfunction App() {\n  const NestedComponent = () => <Text>Hi</Text>; // Created on every render\n\n  return (\n    <View>\n      <NestedComponent />\n    </View>\n  );\n}\n\nexport default App;\n\n// ❌ This should trigger @typescript-eslint/no-floating-promises\nconst asyncFunction = async () => {\n  return Promise.resolve(\"data\");\n};\n\n// Call the function to trigger the rule\nasyncFunction(); // This should trigger no-floating-promises\n\n// ❌ This should trigger @typescript-eslint/consistent-type-definitions\ntype BadInterface = {\n  // This should trigger consistent-type-definitions\n  name: string;\n};\n\n// ❌ This should trigger react-hooks/exhaustive-deps\nexport function ComponentWithHook() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log(count); // Missing count in deps\n  }, []); // ❌ Should include [count]\n\n  return <Text>{count}</Text>;\n}\n\n// ❌ This should trigger @typescript-eslint/no-confusing-void-expression\nfunction confusingVoidFunction() {\n  console.log(\"This returns void but looks like it returns data\");\n}\n\n// ❌ This should trigger react-native/no-inline-styles\nconst BadStyledComponent = () => (\n  <View style={{ margin: 10, padding: 20 }}>\n    {\" \"}\n    {/* ❌ Inline styles */}\n    <Text>Bad styling</Text>\n  </View>\n);\n\n// ❌ This should trigger no-console\nconsole.log(\"This is a console log\");\n\n// ❌ This should trigger react-hooks/purity (impure function in render)\nfunction ComponentWithImpureRender() {\n  const randomValue = Math.random(); // ❌ Impure!\n  return <Text>Random: {randomValue}</Text>;\n}\n\n// ❌ This should trigger react-hooks/refs (reading ref during render)\nfunction ComponentReadingRef() {\n  const ref = useRef(null);\n  const width = (ref.current as any)?.offsetWidth; // ❌ Reading ref during render\n  return <View ref={ref}>Width: {width}</View>;\n}\n\n// ❌ This should trigger react-hooks/immutability (mutating state)\nfunction ComponentMutatingState() {\n  const [items, setItems] = useState([1, 2, 3]);\n  items.push(4); // ❌ Mutating state directly\n  return <Text>Items: {items.length}</Text>;\n}\n\n// ❌ This should trigger react-hooks/set-state-in-render (setting state during render)\nfunction ComponentSettingStateInRender({ value }: { value: number }) {\n  const [count, setCount] = useState(0);\n  setCount(value); // ❌ Setting state during render\n  return <Text>Count: {count}</Text>;\n}\n\n// ❌ This should trigger react-hooks/globals (mutating globals during render)\nlet globalCounter = 0;\nfunction ComponentMutatingGlobals() {\n  globalCounter++; // ❌ Mutating global during render\n  return <Text>Global: {globalCounter}</Text>;\n}\n\n// ❌ Additional TypeScript rule test cases\n\n// ❌ This should trigger @typescript-eslint/await-thenable\nasync function awaitThenable() {\n  const notThenable = 42;\n  await notThenable; // ❌ Awaiting a non-Thenable\n}\n\n// ❌ This should trigger @typescript-eslint/no-misused-promises\nfunction misusedPromise() {\n  if (Promise.resolve(true)) {\n    // ❌ Promise in condition\n    console.log(\"This should not work\");\n  }\n}\n\n// ❌ This should trigger @typescript-eslint/no-unnecessary-type-assertion\nfunction unnecessaryAssertion() {\n  const str: string = \"hello\";\n  const asserted = str; // ❌ Unnecessary assertion\n  return asserted;\n}\n\n// ❌ This should trigger @typescript-eslint/prefer-nullish-coalescing\nfunction preferNullish() {\n  const obj: { prop?: string } = {};\n  const result = obj.prop || \"default\"; // ❌ Should use ??\n  return result;\n}\n\n// ❌ This should trigger @typescript-eslint/prefer-optional-chain\nfunction preferOptionalChain() {\n  const obj: { prop?: { nested: string } } = {};\n  const result = obj.prop?.nested; // ❌ Should use ?.\n  return result;\n}\n\n// ❌ This should trigger @typescript-eslint/no-meaningless-void-operator\nfunction meaninglessVoid() {\n  const result = void \"string\"; // ❌ Meaningless void\n  return result;\n}\n\n// ❌ This should trigger @typescript-eslint/array-type\nfunction arrayType() {\n  const arr: string[] = [\"hello\"]; // ❌ Should use string[]\n  return arr;\n}\n\n// ❌ This should trigger @typescript-eslint/no-empty-object-type\ntype EmptyInterface = {}; // ❌ Empty interface\n\n// ❌ This should trigger @typescript-eslint/no-unnecessary-type-constraint\nfunction unnecessaryConstraint<T extends {}>(param: T) {\n  // ❌ Unnecessary constraint\n  return param;\n}\n\n// ❌ This should trigger @typescript-eslint/no-wrapper-object-types\nfunction wrapperObject(obj: object) {\n  // ❌ Should use object\n  return obj;\n}\n\n// ❌ This should trigger @typescript-eslint/triple-slash-reference\n/// <reference path=\"./types.d.ts\" /> // ❌ Triple slash reference\n\n// ❌ This should trigger @typescript-eslint/consistent-type-assertions\nfunction consistentAssertions() {\n  const str = \"hello\" as any as string; // ❌ Should use single 'as'\n  return str;\n}\n\n// ❌ This should trigger @typescript-eslint/no-extra-non-null-assertion\nfunction extraNonNull() {\n  const str: string | null = \"hello\";\n  const result = (str as any)!; // ❌ Extra non-null assertion\n  return result;\n}\n\n// ❌ This should trigger @typescript-eslint/no-non-null-assertion\nfunction nonNullAssertion() {\n  const str: string | null = \"hello\";\n  const result = str; // ❌ Non-null assertion\n  return result;\n}\n\n// ❌ This should trigger @typescript-eslint/no-redeclare\nfunction redeclareFunction() {\n  var redeclareVar = \"first\";\n  var redeclareVar = \"second\"; // ❌ Redeclaration\n}\n\n// ❌ This should trigger @typescript-eslint/no-useless-constructor\nclass UselessConstructor {\n  constructor() {} // ❌ Useless constructor\n}\n\n// ❌ This should trigger @typescript-eslint/naming-convention\nconst badVariableName = \"snake_case\"; // ❌ Should be camelCase\nenum BadEnum {\n  badMember = \"value\", // ❌ Should be UPPER_CASE\n} // ❌ Type import with side effects\n\n// ❌ This should trigger react/self-closing-comp\nfunction SelfClosingTest() {\n  return (\n    <View>\n      <Text />\n    </View>\n  ); // ❌ Text should be self-closing\n}\n\n// ❌ This should trigger react/jsx-no-useless-fragment\nfunction UselessFragmentTest() {\n  return <Text>Hi</Text>; // ❌ Useless fragment\n}\n\n// ❌ This should trigger react/jsx-no-leaked-render\nfunction LeakedRenderTest() {\n  const condition = Math.random() > 0.5;\n  return <Text>{condition && \"Hi\"}</Text>; // ❌ Leaked render\n}\n\n// ❌ This should trigger react-native/no-unused-styles\nconst unusedStyles = StyleSheet.create({\n  unused: { color: \"red\" }, // ❌ Unused style\n});\n\n// ❌ This should trigger react-native/split-platform-components\nfunction PlatformSpecificTest() {\n  return <Text>Platform test</Text>; // This would be in a file that should be split\n}\n\n// ❌ This should trigger react-native/no-single-element-style-arrays\nconst singleStyleArray = StyleSheet.create({\n  single: [{ color: \"red\" }] as any, // ❌ Single element array\n});\n\n// ❌ This should trigger react-19-upgrade/no-default-props\nfunction ComponentWithDefaultProps({ name = \"Default\" }) {\n  return <Text>{name || \"Default\"}</Text>;\n}\n// ❌ PropTypes import\nfunction ComponentWithPropTypes({ name }: any) {\n  return <Text>{name}</Text>;\n}\n(ComponentWithPropTypes as any).propTypes = {\n  name: PropTypes.string, // ❌ PropTypes usage\n};\n\n// ❌ This should trigger react-19-upgrade/no-legacy-context\nconst LegacyContext = React.createContext(\"default\"); // ❌ Legacy context\n\n// ❌ This should trigger react-19-upgrade/no-string-refs\nfunction ComponentWithStringRef() {\n  return <View ref=\"stringRef\" />; // ❌ String ref\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/__tests__/App.test.tsx","messages":[{"ruleId":"import-x/default","severity":2,"message":"No default export found in imported module \"react\".","line":1,"column":8,"nodeType":"ImportDefaultSpecifier","messageId":"noDefaultExport","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockFn' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":7,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎···`","line":10,"column":21,"nodeType":null,"messageId":"insert","endLine":10,"endColumn":21,"fix":{"range":[365,365],"text":"\n   "}},{"ruleId":"jest/no-disabled-tests","severity":2,"message":"Tests should not be skipped","line":15,"column":3,"nodeType":"CallExpression","messageId":"skippedTest","endLine":17,"endColumn":5},{"ruleId":"jest/no-focused-tests","severity":2,"message":"Unexpected focused test","line":20,"column":6,"nodeType":"Identifier","messageId":"focusedTest","endLine":20,"endColumn":10,"suggestions":[{"messageId":"suggestRemoveFocus","fix":{"range":[633,638],"text":""},"desc":"Remove focus from test"}]},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":25,"column":3,"nodeType":"Identifier","messageId":"noAssertions","endLine":25,"endColumn":5},{"ruleId":"testing-library/await-async-queries","severity":2,"message":"promise returned from `findByText` query must be handled","line":32,"column":29,"nodeType":"Identifier","messageId":"awaitAsyncQuery","endLine":32,"endColumn":39,"fix":{"range":[1006,1006],"text":"await "}},{"ruleId":"jest/prefer-to-be","severity":1,"message":"Use `toBe` when expecting primitive literals","line":38,"column":15,"nodeType":"Identifier","messageId":"useToBe","endLine":38,"endColumn":22,"fix":{"range":[1242,1249],"text":"toBe"}},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":42,"column":3,"nodeType":"Identifier","messageId":"noAssertions","endLine":42,"endColumn":5},{"ruleId":"testing-library/no-await-sync-queries","severity":2,"message":"`getByText` query is sync so it does not need to be awaited","line":48,"column":18,"nodeType":"Identifier","messageId":"noAwaitSyncQuery","endLine":48,"endColumn":27,"fix":{"range":[1503,1508],"text":""}},{"ruleId":"jest/expect-expect","severity":1,"message":"Test has no assertions","line":52,"column":3,"nodeType":"Identifier","messageId":"noAssertions","endLine":52,"endColumn":5},{"ruleId":"testing-library/no-debugging-utils","severity":1,"message":"Unexpected debug statement","line":58,"column":12,"nodeType":"Identifier","messageId":"noDebug","endLine":58,"endColumn":17}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":3,"fixableWarningCount":1,"source":"import React from \"react\";\nimport { View, Text } from \"react-native\";\nimport { render, screen } from \"@testing-library/react-native\";\n\n// ❌ Missing jest setup (should trigger various jest rules)\ndescribe(\"Test Suite\", () => {\n  const mockFn = jest.fn(); // Some code before hook\n\n  // ❌ Hook not at top (should trigger jest/prefer-hooks-on-top)\n  beforeEach(() => { // ❌ Hook not at top\n    // Setup\n  });\n\n  // ❌ Disabled test (should trigger jest/no-disabled-tests and jest/no-test-prefixes)\n  it.skip(\"should be disabled\", () => {\n    expect(true).toBe(true);\n  });\n\n  // ❌ Focused test (should trigger jest/no-focused-tests)\n  it.only(\"should be focused\", () => {\n    expect(true).toBe(true);\n  });\n\n  // ❌ Async test without await (should trigger testing-library/await-async-queries)\n  it(\"should handle async operations\", async () => {\n    render(\n      <View>\n        <Text>Test</Text>\n      </View>,\n    );\n    // Missing await for async queries - this should trigger the rule\n    const _element = screen.findByText(\"Test\"); // ❌ Missing await\n    // Don't await to trigger the linting rule\n  });\n\n  // ❌ Test using toEqual for primitive (should trigger jest/prefer-to-be)\n  it(\"should use toBe for primitives\", () => {\n    expect(1).toEqual(1); // ❌ Should use toBe\n  });\n\n  // ❌ Test awaiting sync query (should trigger testing-library/no-await-sync-queries)\n  it(\"should not await sync queries\", async () => {\n    render(\n      <View>\n        <Text>Sync Test</Text>\n      </View>,\n    );\n    await screen.getByText(\"Sync Test\"); // ❌ Awaiting sync query\n  });\n\n  // ❌ Test using debug (should trigger testing-library/no-debugging-utils)\n  it(\"should not use debug\", () => {\n    render(\n      <View>\n        <Text>Debug Test</Text>\n      </View>,\n    );\n    screen.debug(); // ❌ Using debug\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/babel.config.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2,"endColumn":13,"suggestions":[{"fix":{"range":[55,113],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'This·is·a·console·warning·in·babel·config'` with `\"This·is·a·console·warning·in·babel·config\"`","line":2,"column":14,"nodeType":null,"messageId":"replace","endLine":2,"endColumn":57,"fix":{"range":[68,111],"text":"\"This is a console warning in babel config\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'path'` with `\"path\"`","line":5,"column":22,"nodeType":null,"messageId":"replace","endLine":5,"endColumn":28,"fix":{"range":[182,188],"text":"\"path\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'babel-preset-expo'` with `\"babel-preset-expo\"`","line":8,"column":13,"nodeType":null,"messageId":"replace","endLine":8,"endColumn":32,"fix":{"range":[223,242],"text":"\"babel-preset-expo\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'module-resolver'` with `\"module-resolver\"`","line":11,"column":7,"nodeType":null,"messageId":"replace","endLine":11,"endColumn":24,"fix":{"range":[270,287],"text":"\"module-resolver\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'./src'` with `\"./src\"`","line":13,"column":16,"nodeType":null,"messageId":"replace","endLine":13,"endColumn":23,"fix":{"range":[312,319],"text":"\"./src\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'.ios.js',·'.android.js',·'.js',·'.ts',·'.tsx',·'.json'` with `\".ios.js\",·\".android.js\",·\".js\",·\".ts\",·\".tsx\",·\".json\"`","line":14,"column":22,"nodeType":null,"messageId":"replace","endLine":14,"endColumn":77,"fix":{"range":[343,398],"text":"\".ios.js\", \".android.js\", \".js\", \".ts\", \".tsx\", \".json\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'@':·path.resolve(__dirname,·'src'` with `\"@\":·path.resolve(__dirname,·\"src\"`","line":16,"column":11,"nodeType":null,"messageId":"replace","endLine":16,"endColumn":45,"fix":{"range":[428,462],"text":"\"@\": path.resolve(__dirname, \"src\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":21,"column":3,"nodeType":null,"messageId":"insert","endLine":21,"endColumn":3,"fix":{"range":[499,499],"text":"\n"}}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":8,"fixableWarningCount":0,"source":"// ❌ This should trigger no-console in production code\nconsole.warn('This is a console warning in babel config');\n\n// ❌ This should use Node.js globals properly\nconst path = require('path');\n\nmodule.exports = {\n  presets: ['babel-preset-expo'],\n  plugins: [\n    [\n      'module-resolver',\n      {\n        root: ['./src'],\n        extensions: ['.ios.js', '.android.js', '.js', '.ts', '.tsx', '.json'],\n        alias: {\n          '@': path.resolve(__dirname, 'src'),\n        },\n      },\n    ],\n  ],\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/components/BadImports.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'useState' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18,"fix":{"range":[52,86],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'react'` with `\"react\"`","line":2,"column":26,"nodeType":null,"messageId":"replace","endLine":2,"endColumn":33,"fix":{"range":[77,84],"text":"\"react\""}},{"ruleId":"import/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/react/index.js' imported multiple times.","line":2,"column":26,"nodeType":"Literal","endLine":2,"endColumn":33},{"ruleId":"import-x/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/@types/react/index.d.ts' imported multiple times.","line":2,"column":26,"nodeType":"Literal","messageId":"duplicate","endLine":2,"endColumn":33},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'react-native'` with `\"react-native\"`","line":3,"column":28,"nodeType":null,"messageId":"replace","endLine":3,"endColumn":42,"fix":{"range":[113,127],"text":"\"react-native\""}},{"ruleId":"import/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/react-native/index.js' imported multiple times.","line":3,"column":28,"nodeType":"Literal","endLine":3,"endColumn":42},{"ruleId":"import-x/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/react-native/types/index.d.ts' imported multiple times.","line":3,"column":28,"nodeType":"Literal","messageId":"duplicate","endLine":3,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StatusBar' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'StatusBar' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19,"fix":{"range":[129,174],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'expo-status-bar'` with `\"expo-status-bar\"`","line":4,"column":27,"nodeType":null,"messageId":"replace","endLine":4,"endColumn":44,"fix":{"range":[155,172],"text":"\"expo-status-bar\""}},{"ruleId":"import-x/order","severity":2,"message":"There should be no empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"noLineBetweenGroups","endLine":5,"endColumn":27},{"ruleId":"import-x/order","severity":2,"message":"`react` import should occur before import of `react-native`","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"order","endLine":5,"endColumn":27,"fix":{"range":[86,226],"text":"import React from 'react'; // React should be first\nimport { View, Text } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\n"}},{"ruleId":"import-x/default","severity":2,"message":"No default export found in imported module \"react\".","line":5,"column":8,"nodeType":"ImportDefaultSpecifier","messageId":"noDefaultExport","endLine":5,"endColumn":13},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'react'` with `\"react\"`","line":5,"column":19,"nodeType":null,"messageId":"replace","endLine":5,"endColumn":26,"fix":{"range":[192,199],"text":"\"react\""}},{"ruleId":"import/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/react/index.js' imported multiple times.","line":5,"column":19,"nodeType":"Literal","endLine":5,"endColumn":26},{"ruleId":"import-x/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/@types/react/index.d.ts' imported multiple times.","line":5,"column":19,"nodeType":"Literal","messageId":"duplicate","endLine":5,"endColumn":26},{"ruleId":"import-x/order","severity":2,"message":"`react-native` import should occur before import of `expo-status-bar`","line":8,"column":1,"nodeType":"ImportDeclaration","messageId":"order","endLine":8,"endColumn":43,"fix":{"range":[129,339],"text":"import { StyleSheet } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react'; // React should be first\n\n// ❌ Unused import (should trigger no-unused-vars or unused-imports)\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StyleSheet' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'StyleSheet' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20,"fix":{"range":[296,340],"text":"\n"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'react-native'` with `\"react-native\"`","line":8,"column":28,"nodeType":null,"messageId":"replace","endLine":8,"endColumn":42,"fix":{"range":[323,337],"text":"\"react-native\""}},{"ruleId":"import/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/react-native/index.js' imported multiple times.","line":8,"column":28,"nodeType":"Literal","endLine":8,"endColumn":42},{"ruleId":"import-x/no-duplicates","severity":1,"message":"'/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/node_modules/react-native/types/index.d.ts' imported multiple times.","line":8,"column":28,"nodeType":"Literal","messageId":"duplicate","endLine":8,"endColumn":42},{"ruleId":"import-x/no-anonymous-default-export","severity":2,"message":"Assign arrow function to a variable before exporting as module default","line":11,"column":1,"nodeType":"ExportDefaultDeclaration","messageId":"assign","endLine":17,"endColumn":3},{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":11,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"noDisplayName","endLine":17,"endColumn":2},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":17,"column":3,"nodeType":null,"messageId":"insert","endLine":17,"endColumn":3,"fix":{"range":[520,520],"text":"\n"}}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":11,"fixableWarningCount":0,"source":"// ❌ Bad import order (should trigger import/order)\nimport { useState } from 'react';\nimport { View, Text } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react'; // React should be first\n\n// ❌ Unused import (should trigger no-unused-vars or unused-imports)\nimport { StyleSheet } from 'react-native';\n\n// ❌ Anonymous default export (should trigger import/no-anonymous-default-export)\nexport default () => {\n  return (\n    <View>\n      <Text>Test Component</Text>\n    </View>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/components/UnusedComponent.tsx","messages":[{"ruleId":"import-x/default","severity":2,"message":"No default export found in imported module \"react\".","line":1,"column":8,"nodeType":"ImportDefaultSpecifier","messageId":"noDefaultExport","endLine":1,"endColumn":13},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'react'` with `\"react\"`","line":1,"column":19,"nodeType":null,"messageId":"replace","endLine":1,"endColumn":26,"fix":{"range":[18,25],"text":"\"react\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'react-native'` with `\"react-native\"`","line":2,"column":28,"nodeType":null,"messageId":"replace","endLine":2,"endColumn":42,"fix":{"range":[54,68],"text":"\"react-native\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":13,"column":32,"nodeType":null,"messageId":"insert","endLine":13,"endColumn":32,"fix":{"range":[310,310],"text":"\n"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text } from 'react-native';\n\n// ❌ This component is imported but never used (should trigger no-unused-vars)\nconst UnusedComponent: React.FC = () => {\n  return (\n    <View>\n      <Text>I am an unused component</Text>\n    </View>\n  );\n};\n\nexport default UnusedComponent;","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/eslint.config.js","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'eslint-config-expo-magic'` with `\"eslint-config-expo-magic\"`","line":1,"column":27,"nodeType":null,"messageId":"replace","endLine":1,"endColumn":53,"fix":{"range":[26,52],"text":"\"eslint-config-expo-magic\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'node_modules/**'` with `\"node_modules/**\"`","line":8,"column":7,"nodeType":null,"messageId":"replace","endLine":8,"endColumn":24,"fix":{"range":[163,180],"text":"\"node_modules/**\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'dist/**'` with `\"dist/**\"`","line":9,"column":7,"nodeType":null,"messageId":"replace","endLine":9,"endColumn":16,"fix":{"range":[188,197],"text":"\"dist/**\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'build/**'` with `\"build/**\"`","line":10,"column":7,"nodeType":null,"messageId":"replace","endLine":10,"endColumn":17,"fix":{"range":[205,215],"text":"\"build/**\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'.env*'` with `\".env*\"`","line":11,"column":7,"nodeType":null,"messageId":"replace","endLine":11,"endColumn":14,"fix":{"range":[223,230],"text":"\".env*\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'.vscode/**'` with `\".vscode/**\"`","line":12,"column":7,"nodeType":null,"messageId":"replace","endLine":12,"endColumn":19,"fix":{"range":[238,250],"text":"\".vscode/**\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'.idea/**'` with `\".idea/**\"`","line":13,"column":7,"nodeType":null,"messageId":"replace","endLine":13,"endColumn":17,"fix":{"range":[258,268],"text":"\".idea/**\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'.DS_Store'` with `\".DS_Store\"`","line":14,"column":7,"nodeType":null,"messageId":"replace","endLine":14,"endColumn":18,"fix":{"range":[276,287],"text":"\".DS_Store\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Thumbs.db'` with `\"Thumbs.db\"`","line":15,"column":7,"nodeType":null,"messageId":"replace","endLine":15,"endColumn":18,"fix":{"range":[295,306],"text":"\"Thumbs.db\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'*.log'` with `\"*.log\"`","line":16,"column":7,"nodeType":null,"messageId":"replace","endLine":16,"endColumn":14,"fix":{"range":[314,321],"text":"\"*.log\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'npm-debug.log*'` with `\"npm-debug.log*\"`","line":17,"column":7,"nodeType":null,"messageId":"replace","endLine":17,"endColumn":23,"fix":{"range":[329,345],"text":"\"npm-debug.log*\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'yarn-debug.log*'` with `\"yarn-debug.log*\"`","line":18,"column":7,"nodeType":null,"messageId":"replace","endLine":18,"endColumn":24,"fix":{"range":[353,370],"text":"\"yarn-debug.log*\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'yarn-error.log*'` with `\"yarn-error.log*\"`","line":19,"column":7,"nodeType":null,"messageId":"replace","endLine":19,"endColumn":24,"fix":{"range":[378,395],"text":"\"yarn-error.log*\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'package-lock.json'` with `\"package-lock.json\"`","line":20,"column":7,"nodeType":null,"messageId":"replace","endLine":20,"endColumn":26,"fix":{"range":[403,422],"text":"\"package-lock.json\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'yarn.lock'` with `\"yarn.lock\"`","line":21,"column":7,"nodeType":null,"messageId":"replace","endLine":21,"endColumn":18,"fix":{"range":[430,441],"text":"\"yarn.lock\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'pnpm-lock.yaml'` with `\"pnpm-lock.yaml\",`","line":22,"column":7,"nodeType":null,"messageId":"replace","endLine":22,"endColumn":23,"fix":{"range":[449,465],"text":"\"pnpm-lock.yaml\","}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":23,"column":6,"nodeType":null,"messageId":"insert","endLine":23,"endColumn":6,"fix":{"range":[471,471],"text":","}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":24,"column":4,"nodeType":null,"messageId":"insert","endLine":24,"endColumn":4,"fix":{"range":[475,475],"text":","}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":25,"column":3,"nodeType":null,"messageId":"insert","endLine":25,"endColumn":3,"fix":{"range":[478,478],"text":"\n"}}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":19,"fixableWarningCount":0,"source":"const expoMagic = require('eslint-config-expo-magic');\n\nmodule.exports = [\n  ...expoMagic,\n  // Add any custom overrides for testing here\n  {\n    ignores: [\n      'node_modules/**',\n      'dist/**',\n      'build/**',\n      '.env*',\n      '.vscode/**',\n      '.idea/**',\n      '.DS_Store',\n      'Thumbs.db',\n      '*.log',\n      'npm-debug.log*',\n      'yarn-debug.log*',\n      'yarn-error.log*',\n      'package-lock.json',\n      'yarn.lock',\n      'pnpm-lock.yaml'\n    ]\n  }\n];","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/index.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2,"endColumn":12,"suggestions":[{"fix":{"range":[36,71],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'Hello·from·index.js'` with `\"Hello·from·index.js\"`","line":2,"column":13,"nodeType":null,"messageId":"replace","endLine":2,"endColumn":34,"fix":{"range":[48,69],"text":"\"Hello from index.js\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'I·am·never·used'` with `\"I·am·never·used\"`","line":5,"column":24,"nodeType":null,"messageId":"replace","endLine":5,"endColumn":41,"fix":{"range":[136,153],"text":"\"I am never used\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'undefined'` with `\"undefined\"`","line":8,"column":23,"nodeType":null,"messageId":"replace","endLine":8,"endColumn":34,"fix":{"range":[242,253],"text":"\"undefined\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'This·is·a·browser·alert'` with `\"This·is·a·browser·alert\"`","line":9,"column":16,"nodeType":null,"messageId":"replace","endLine":9,"endColumn":41,"fix":{"range":[272,297],"text":"\"This is a browser alert\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'I·never·change'` with `\"I·never·change\"`","line":13,"column":21,"nodeType":null,"messageId":"replace","endLine":13,"endColumn":37,"fix":{"range":[404,420],"text":"\"I never change\""}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":16,"endColumn":44,"fix":{"range":[455,458],"text":"let"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'This·should·be·let·or·const'` with `\"This·should·be·let·or·const\"`","line":16,"column":14,"nodeType":null,"messageId":"replace","endLine":16,"endColumn":43,"fix":{"range":[468,497],"text":"\"This should be let or const\""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":12,"suggestions":[{"fix":{"range":[545,572],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":24,"column":3,"nodeType":null,"messageId":"insert","endLine":24,"endColumn":3,"fix":{"range":[623,623],"text":"\n"}}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":8,"fixableWarningCount":0,"source":"// ❌ This should trigger no-console\nconsole.log('Hello from index.js');\n\n// ❌ This should trigger no-unused-vars\nconst unusedVariable = 'I am never used';\n\n// ❌ This should trigger no-undef (if not using proper globals)\nif (typeof window !== 'undefined') {\n  window.alert('This is a browser alert');\n}\n\n// ❌ This should trigger prefer-const (not exported so ESLint sees it as unused)\nlet shouldBeConst = 'I never change';\n\n// ❌ This should trigger no-var\nvar oldVar = 'This should be let or const';\n\n// Use shouldBeConst to trigger prefer-const\nconsole.log(shouldBeConst);\n\nmodule.exports = {\n  unusedVariable,\n  oldVar,\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/metro.config.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":2,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2,"endColumn":12,"suggestions":[{"fix":{"range":[55,107],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'This·is·a·console·log·in·config·file'` with `\"This·is·a·console·log·in·config·file\"`","line":2,"column":13,"nodeType":null,"messageId":"replace","endLine":2,"endColumn":51,"fix":{"range":[67,105],"text":"\"This is a console log in config file\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'path'` with `\"path\"`","line":5,"column":22,"nodeType":null,"messageId":"replace","endLine":5,"endColumn":28,"fix":{"range":[176,182],"text":"\"path\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'index.js'` with `\"index.js\"`","line":7,"column":31,"nodeType":null,"messageId":"replace","endLine":7,"endColumn":41,"fix":{"range":[232,242],"text":"\"index.js\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎`","line":10,"column":25,"nodeType":null,"messageId":"insert","endLine":10,"endColumn":25,"fix":{"range":[273,273],"text":"\n"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":4,"fixableWarningCount":0,"source":"// ❌ This should trigger no-console in production code\nconsole.log('This is a console log in config file');\n\n// ❌ This should use Node.js globals properly\nconst path = require('path');\nconst config = {\n  entry: path.join(__dirname, 'index.js'),\n};\n\nmodule.exports = config;","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/utils/helpers.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'I·am·a·helper·function'` with `\"I·am·a·helper·function\"`","line":3,"column":10,"nodeType":null,"messageId":"replace","endLine":3,"endColumn":34,"fix":{"range":[125,149],"text":"\"I am a helper function\""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'I·am·never·used';` with `\"I·am·never·used\";⏎`","line":7,"column":29,"nodeType":null,"messageId":"replace","endLine":7,"endColumn":47,"fix":{"range":[242,260],"text":"\"I am never used\";\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// ❌ This function is imported but never used (should trigger no-unused-vars)\nexport const HelperFunction = () => {\n  return 'I am a helper function';\n};\n\n// ❌ This should trigger @typescript-eslint/no-unused-vars\nexport const unusedHelper = 'I am never used';","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/validate-comprehensive.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":12,"suggestions":[{"fix":{"range":[95,171],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":7,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":7,"endColumn":12,"suggestions":[{"fix":{"range":[172,249],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":16,"suggestions":[{"fix":{"range":[3983,4019],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":16,"suggestions":[{"fix":{"range":[4932,4970],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":16,"suggestions":[{"fix":{"range":[4975,5010],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":16,"suggestions":[{"fix":{"range":[5015,5107],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":16,"suggestions":[{"fix":{"range":[5112,5210],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":16,"suggestions":[{"fix":{"range":[5215,5349],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":18,"suggestions":[{"fix":{"range":[5518,5583],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":16,"suggestions":[{"fix":{"range":[5615,5667],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":16,"suggestions":[{"fix":{"range":[5701,5746],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":16,"suggestions":[{"fix":{"range":[5751,5794],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'expectedFiles' is assigned a value but never used.","line":205,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"expectedFiles"},"fix":{"range":[5939,5954],"text":""},"desc":"Remove unused variable 'expectedFiles'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":20,"suggestions":[{"fix":{"range":[6116,6178],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":18,"suggestions":[{"fix":{"range":[6490,6533],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":38,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":227,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":227,"endColumn":18,"suggestions":[{"fix":{"range":[6647,6702],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":228,"column":36,"nodeType":"MemberExpression","messageId":"unexpected","endLine":228,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":16,"suggestions":[{"fix":{"range":[6801,6841],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":233,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":233,"endColumn":16,"suggestions":[{"fix":{"range":[6846,6883],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":241,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":241,"endColumn":20,"suggestions":[{"fix":{"range":[7067,7166],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":20,"suggestions":[{"fix":{"range":[7190,7241],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":18,"suggestions":[{"fix":{"range":[7279,7375],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":16,"suggestions":[{"fix":{"range":[7411,7449],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":16,"suggestions":[{"fix":{"range":[7454,7489],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":18,"suggestions":[{"fix":{"range":[7539,7599],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":18,"suggestions":[{"fix":{"range":[7606,7646],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":18,"suggestions":[{"fix":{"range":[7685,7721],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":18,"suggestions":[{"fix":{"range":[7728,7790],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":18,"suggestions":[{"fix":{"range":[7797,7892],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":270,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":270,"endColumn":18,"suggestions":[{"fix":{"range":[7943,8003],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":281,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":281,"endColumn":18,"suggestions":[{"fix":{"range":[8156,8198],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env bun\n\nconst { spawn } = require(\"child_process\");\nconst path = require(\"path\");\n\nconsole.log(\"🚀 ESLint Config Expo Magic - Comprehensive Validation Suite\");\nconsole.log(\"===========================================================\\n\");\n\n// Expected rules that should trigger\nconst expectedRules = {\n  // TypeScript rules\n  \"@typescript-eslint/no-unused-vars\": [\n    \"App.tsx\",\n    \"components/BadImports.tsx\",\n    \"utils/helpers.ts\",\n  ],\n  \"@typescript-eslint/no-floating-promises\": [\n    \"App.tsx\",\n    \"__tests__/App.test.tsx\",\n  ],\n  \"@typescript-eslint/no-explicit-any\": [\"App.tsx\"],\n  \"@typescript-eslint/await-thenable\": [\"App.tsx\"],\n  \"@typescript-eslint/no-misused-promises\": [\"App.tsx\"],\n  \"@typescript-eslint/prefer-nullish-coalescing\": [\"App.tsx\"],\n  \"@typescript-eslint/no-redeclare\": [\"App.tsx\"],\n  \"@typescript-eslint/no-useless-constructor\": [\"App.tsx\"],\n  \"@typescript-eslint/naming-convention\": [\"App.tsx\"],\n\n  // React rules\n  \"react/no-unstable-nested-components\": [\"App.tsx\"],\n  \"react-hooks/exhaustive-deps\": [\"App.tsx\"],\n  \"react-hooks/purity\": [\"App.tsx\"],\n  \"react-hooks/refs\": [\"App.tsx\"],\n  \"react-hooks/set-state-in-render\": [\"App.tsx\"],\n  \"react-hooks/static-components\": [\"App.tsx\"],\n  \"react/display-name\": [\"components/BadImports.tsx\"],\n\n  // React Native rules\n  \"react-native/no-inline-styles\": [\"App.tsx\"],\n  \"react-native/no-raw-text\": [\"App.tsx\"],\n\n  // Jest rules\n  \"jest/no-disabled-tests\": [\"__tests__/App.test.tsx\"],\n  \"jest/no-focused-tests\": [\"__tests__/App.test.tsx\"],\n  \"jest/prefer-to-be\": [\"__tests__/App.test.tsx\"],\n  \"jest/expect-expect\": [\"__tests__/App.test.tsx\"],\n\n  // Testing Library rules\n  \"testing-library/await-async-queries\": [\"__tests__/App.test.tsx\"],\n  \"testing-library/no-await-sync-queries\": [\"__tests__/App.test.tsx\"],\n  \"testing-library/no-debugging-utils\": [\"__tests__/App.test.tsx\"],\n\n  // Import rules\n  \"import/no-duplicates\": [\"App.tsx\", \"components/BadImports.tsx\"],\n  \"import-x/order\": [\n    \"App.tsx\",\n    \"components/BadImports.tsx\",\n    \"__tests__/App.test.tsx\",\n  ],\n  \"import-x/no-duplicates\": [\"App.tsx\", \"components/BadImports.tsx\"],\n  \"import-x/no-anonymous-default-export\": [\"App.tsx\"],\n\n  // Unused imports rules\n  \"unused-imports/no-unused-imports\": [\"components/BadImports.tsx\", \"App.tsx\"],\n\n  // General rules\n  \"no-var\": [\"index.js\", \"App.tsx\"],\n  \"no-unused-vars\": [\"validate.js\"],\n  \"no-undef\": [\"validate.js\"],\n  \"no-console\": [\"App.tsx\"],\n\n  // Prettier (formatting)\n  \"prettier/prettier\": [\n    \".eslintrc.js\",\n    \"App.tsx\",\n    \"__tests__/App.test.tsx\",\n    \"babel.config.js\",\n    \"components/BadImports.tsx\",\n    \"components/UnusedComponent.tsx\",\n    \"eslint.config.js\",\n    \"index.js\",\n    \"jest.config.js\",\n    \"metro.config.js\",\n    \"utils/helpers.ts\",\n    \"validate.js\",\n  ],\n};\n\nconst expectedErrorsCount = 141;\nconst expectedWarningsCount = 86;\n\nasync function runCommand(command, args, options = {}) {\n  return new Promise((resolve, reject) => {\n    const child = spawn(command, args, {\n      cwd: process.cwd(),\n      stdio: [\"pipe\", \"pipe\", \"pipe\"],\n      ...options,\n    });\n\n    let stdout = \"\";\n    let stderr = \"\";\n\n    // Add timeout to prevent hanging\n    const timeout = setTimeout(() => {\n      child.kill();\n      resolve({ stdout, stderr, code: 1, timedOut: true });\n    }, 15000); // 15 second timeout (reduced from 30)\n\n    child.stdout.on(\"data\", (data) => {\n      stdout += data.toString();\n    });\n\n    child.stderr.on(\"data\", (data) => {\n      stderr += data.toString();\n    });\n\n    child.on(\"close\", (code) => {\n      clearTimeout(timeout);\n      if (code === 0 || code === 1) {\n        // ESLint exits with 1 when there are errors, which is expected\n        resolve({ stdout, stderr, code });\n      } else {\n        reject(new Error(`Command failed with code ${code}: ${stderr}`));\n      }\n    });\n\n    child.on(\"error\", (error) => {\n      clearTimeout(timeout);\n      reject(error);\n    });\n  });\n}\n\nasync function runValidation() {\n  try {\n    console.log(\"📋 Running ESLint...\");\n\n    // Run ESLint using spawn\n    const result = await runCommand(\"./node_modules/.bin/eslint\", [\n      \".\",\n      \"--ext\",\n      \".js,.jsx,.ts,.tsx\",\n      \"--format=json\",\n    ]);\n\n    const results = JSON.parse(result.stdout);\n\n    // Analyze results\n    const ruleCounts = {};\n    const fileCounts = {};\n    let totalErrors = 0;\n    let totalWarnings = 0;\n\n    results.forEach((result) => {\n      if (result.filePath) {\n        const fileName = path.basename(result.filePath);\n        fileCounts[fileName] =\n          (fileCounts[fileName] || 0) + result.messages.length;\n\n        result.messages.forEach((message) => {\n          const ruleId = message.ruleId;\n          if (ruleId) {\n            ruleCounts[ruleId] = (ruleCounts[ruleId] || 0) + 1;\n\n            if (message.severity === 2) totalErrors++;\n            if (message.severity === 1) totalWarnings++;\n          }\n        });\n      }\n    });\n\n    console.log(`\\n📊 Analysis Results:`);\n    console.log(`===================`);\n    console.log(\n      `Total Errors: ${totalErrors} (Expected: ${expectedErrorsCount})`,\n    );\n    console.log(\n      `Total Warnings: ${totalWarnings} (Expected: ${expectedWarningsCount})`,\n    );\n    console.log(\n      `Total Problems: ${totalErrors + totalWarnings} (Expected: ${expectedErrorsCount + expectedWarningsCount})`,\n    );\n\n    // Check counts\n    const countsValid =\n      totalErrors === expectedErrorsCount &&\n      totalWarnings === expectedWarningsCount;\n\n    if (!countsValid) {\n      console.log(`❌ ERROR: Problem counts don't match expectations!`);\n      return false;\n    }\n\n    console.log(`✅ Problem counts match expectations!`);\n\n    // Check expected rules\n    console.log(`\\n🔍 Checking Expected Rules:`);\n    console.log(`===========================`);\n\n    let allRulesPresent = true;\n    const missingRules = [];\n    const extraRules = [];\n\n    // Check for expected rules\n    for (const [ruleId, expectedFiles] of Object.entries(expectedRules)) {\n      if (!ruleCounts[ruleId]) {\n        missingRules.push(ruleId);\n        allRulesPresent = false;\n      } else {\n        console.log(`✅ ${ruleId}: ${ruleCounts[ruleId]} occurrences`);\n      }\n    }\n\n    // Check for unexpected rules (rules that triggered but weren't expected)\n    for (const ruleId of Object.keys(ruleCounts)) {\n      if (!expectedRules[ruleId]) {\n        extraRules.push(`${ruleId} (${ruleCounts[ruleId]} occurrences)`);\n      }\n    }\n\n    if (missingRules.length > 0) {\n      console.log(`\\n❌ Missing Expected Rules:`);\n      missingRules.forEach((rule) => console.log(`   - ${rule}`));\n    }\n\n    if (extraRules.length > 0) {\n      console.log(`\\n⚠️  Unexpected Rules (might be okay):`);\n      extraRules.forEach((rule) => console.log(`   - ${rule}`));\n    }\n\n    // Run Jest tests\n    console.log(`\\n🃏 Running Jest Tests:`);\n    console.log(`=====================`);\n\n    try {\n      const jestResult = await runCommand(\"./node_modules/.bin/jest\", [\n        \"--passWithNoTests\",\n        \"--silent\",\n      ]);\n      if (jestResult.timedOut) {\n        console.log(\n          \"⚠️  Jest execution timed out (this is expected for validation)\",\n        );\n      } else {\n        console.log(\"✅ Jest tests completed successfully\");\n      }\n    } catch (_error) {\n      console.log(\n        \"✅ Jest tests failed as expected (this is normal for validation)\",\n      );\n    }\n\n    // Final validation\n    console.log(`\\n🎯 Final Validation:`);\n    console.log(`===================`);\n\n    if (allRulesPresent && countsValid) {\n      console.log(`🎉 All expected rules are working correctly!`);\n      console.log(`🚀 Ready for publishing!`);\n      return true;\n    } else {\n      console.log(`❌ VALIDATION FAILED!`);\n      console.log(`⚠️  Some rules are not triggering as expected.`);\n      console.log(\n        `🚫 PUBLISH CANCELLED - Check the configuration and test files.`,\n      );\n      return false;\n    }\n  } catch (error) {\n    console.error(`❌ Error running validation:`, error.message);\n    return false;\n  }\n}\n\n// Run the validation\nrunValidation()\n  .then((success) => {\n    process.exit(success ? 0 : 1);\n  })\n  .catch((error) => {\n    console.error(\"Unexpected error:\", error);\n    process.exit(1);\n  });\n","usedDeprecatedRules":[]},{"filePath":"/Users/jota/Workspace/Projects/eslint-config-expo-magic/test-project/validate.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'fs' is assigned a value but never used.","line":4,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"fs"},"fix":{"range":[68,93],"text":""},"desc":"Remove unused variable 'fs'."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":7,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":7,"endColumn":12,"suggestions":[{"fix":{"range":[125,187],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":12,"suggestions":[{"fix":{"range":[188,252],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":16,"suggestions":[{"fix":{"range":[1453,1489],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":45,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":14,"suggestions":[{"fix":{"range":[1937,1975],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":14,"suggestions":[{"fix":{"range":[1978,2012],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"fix":{"range":[2159,2223],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":69,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":69,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":22,"suggestions":[{"fix":{"range":[2349,2406],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":14,"suggestions":[{"fix":{"range":[2467,2496],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":14,"suggestions":[{"fix":{"range":[2499,2552],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":14,"suggestions":[{"fix":{"range":[2555,2616],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":14,"suggestions":[{"fix":{"range":[2663,2709],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"fix":{"range":[2856,2892],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":18,"suggestions":[{"fix":{"range":[2933,2973],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":14,"suggestions":[{"fix":{"range":[3010,3050],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":14,"suggestions":[{"fix":{"range":[3053,3111],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":14,"suggestions":[{"fix":{"range":[3114,3169],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":16,"suggestions":[{"fix":{"range":[3202,3264],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":16,"suggestions":[{"fix":{"range":[3297,3361],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":16,"suggestions":[{"fix":{"range":[3366,3424],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":18,"suggestions":[{"fix":{"range":[3580,3622],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":18,"suggestions":[{"fix":{"range":[3665,3734],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":18,"suggestions":[{"fix":{"range":[3788,3848],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nconst { execSync } = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconsole.log(\"🚀 ESLint Config Expo Magic - Validation Suite\");\nconsole.log(\"==============================================\\n\");\n\n// Expected rules that should trigger errors\nconst expectedRules = {\n  // TypeScript Rules\n  \"@typescript-eslint/no-explicit-any\": [\"App.tsx\"],\n  \"@typescript-eslint/no-floating-promises\": [\"App.tsx\"],\n  \"@typescript-eslint/no-confusing-void-expression\": [\"App.tsx\"],\n  \"@typescript-eslint/no-unused-vars\": [\n    \"App.tsx\",\n    \"utils/helpers.ts\",\n    \"components/UnusedComponent.tsx\",\n  ],\n  \"@typescript-eslint/consistent-type-definitions\": [\n    \"components/BadImports.tsx\",\n  ],\n  \"react/no-unstable-nested-components\": [\"App.tsx\"],\n  \"react-hooks/exhaustive-deps\": [\"App.tsx\"],\n  \"react-native/no-inline-styles\": [\"App.tsx\"],\n  \"no-restricted-imports\": [\"App.tsx\"],\n  \"import-x/order\": [\"components/BadImports.tsx\"],\n  \"import-x/no-anonymous-default-export\": [\"components/BadImports.tsx\"],\n  \"unused-imports/no-unused-imports\": [\"App.tsx\", \"components/BadImports.tsx\"],\n  \"jest/no-disabled-tests\": [\"__tests__/App.test.tsx\"],\n  \"jest/no-focused-tests\": [\"__tests__/App.test.tsx\"],\n  \"testing-library/await-async-queries\": [\"__tests__/App.test.tsx\"],\n  \"no-console\": [\"App.tsx\", \"index.js\", \"metro.config.js\", \"babel.config.js\"],\n  \"no-var\": [\"index.js\"],\n};\n\nfunction runESLint() {\n  try {\n    console.log(\"📋 Running ESLint...\");\n    const output = execSync(\n      \"npx eslint . --ext .js,.jsx,.ts,.tsx --format=json\",\n      {\n        encoding: \"utf8\",\n        cwd: __dirname,\n      },\n    );\n\n    const results = JSON.parse(output);\n    return results;\n  } catch (error) {\n    // ESLint exits with code 1 when there are errors, which is expected\n    if (error.stdout) {\n      return JSON.parse(error.stdout);\n    }\n    throw error;\n  }\n}\n\nfunction analyzeResults(results) {\n  console.log(\"\\n📊 Analysis Results:\");\n  console.log(\"==================\");\n\n  const foundRules = new Set();\n  let totalErrors = 0;\n\n  results.forEach((file) => {\n    if (file.messages && file.messages.length > 0) {\n      console.log(`\\n📁 ${path.relative(__dirname, file.filePath)}:`);\n      file.messages.forEach((message) => {\n        if (message.ruleId) {\n          foundRules.add(message.ruleId);\n          console.log(`  ❌ ${message.ruleId}: ${message.message}`);\n          totalErrors++;\n        }\n      });\n    }\n  });\n\n  console.log(`\\n📈 Summary:`);\n  console.log(`   Total errors found: ${totalErrors}`);\n  console.log(`   Unique rules triggered: ${foundRules.size}`);\n\n  // Check which expected rules were found\n  console.log(\"\\n✅ Expected Rules Validation:\");\n  let passedRules = 0;\n  let failedRules = 0;\n\n  Object.entries(expectedRules).forEach(([rule, files]) => {\n    if (foundRules.has(rule)) {\n      console.log(`   ✅ ${rule} - FOUND`);\n      passedRules++;\n    } else {\n      console.log(`   ❌ ${rule} - NOT FOUND`);\n      failedRules++;\n    }\n  });\n\n  console.log(`\\n🎯 Validation Results:`);\n  console.log(`   Rules working correctly: ${passedRules}`);\n  console.log(`   Rules not triggering: ${failedRules}`);\n\n  if (failedRules === 0) {\n    console.log(\"\\n🎉 All expected rules are working correctly!\");\n    return true;\n  } else {\n    console.log(\"\\n⚠️  Some rules are not triggering as expected.\");\n    console.log(\"   Check the configuration and test files.\");\n    return false;\n  }\n}\n\nfunction main() {\n  try {\n    const results = runESLint();\n    const success = analyzeResults(results);\n\n    if (success) {\n      console.log(\"\\n🚀 Ready for publishing!\");\n      process.exit(0);\n    } else {\n      console.log(\"\\n❌ Validation failed. Please check the issues above.\");\n      process.exit(1);\n    }\n  } catch (error) {\n    console.error(\"❌ Error running validation:\", error.message);\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = { runESLint, analyzeResults };\n","usedDeprecatedRules":[]}]
error: script "lint" exited with code 1
